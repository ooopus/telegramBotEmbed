name: Build Project

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 任务1: 使用 Cross 在 Ubuntu 上交叉编译 Linux 和 Windows
  cross-build:
    name: Cross-build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      # 只有当矩阵目标是 linux 时，才运行此步骤。
      - name: Install dependencies for Linux target
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y libssl-dev

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo.git/db/
            target/
          key: ${{ runner.os }}-cross-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cross-${{ matrix.target }}-

      - name: Build binary with cross
        run: cross build --release --target ${{ matrix.target }} --verbose

      - name: Prepare artifact
        id: prepare_artifact
        shell: bash
        run: |
          BIN_NAME="telembed" # <-- 你的包名
          TARGET="${{ matrix.target }}"

          BIN_PATH="target/${TARGET}/release/${BIN_NAME}"
          ARTIFACT_NAME="${BIN_NAME}-${TARGET}"

          # 如果目标是 Windows，直接在路径和名称后面追加 .exe
          if [[ "$TARGET" == *"-windows-"* ]]; then
            BIN_PATH="${BIN_PATH}.exe"
            ARTIFACT_NAME="${ARTIFACT_NAME}.exe"
          fi

          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "bin_path=${BIN_PATH}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.artifact_name }}
          path: ${{ steps.prepare_artifact.outputs.bin_path }}

  # 任务2: 使用原生 macOS 环境构建 macOS 版本
  build-macos:
    name: Native build for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo.git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build binary with cargo
        run: cargo build --release --verbose

      - name: Prepare artifact
        id: prepare_artifact
        shell: bash
        run: |
          BIN_NAME="telembed"
          TARGET="x86_64-apple-darwin"
          BIN_PATH="target/release/${BIN_NAME}"
          ARTIFACT_NAME="${BIN_NAME}-${TARGET}"
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "bin_path=${BIN_PATH}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.artifact_name }}
          path: ${{ steps.prepare_artifact.outputs.bin_path }}
