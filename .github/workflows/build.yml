name: Build Project

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.target }}
    # 为每个目标选择对应的原生操作系统
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # 定义目标和操作系统的对应关系
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu # 或者 x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # --- 特定于操作系统的依赖安装 ---
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      # Windows 和 macOS 通常不需要手动安装 OpenSSL，Rust 的 openssl-sys crate 能处理好。
      # 如果在 Windows 上遇到问题，可以考虑使用 vcpkg 或启用 vendored 特性。
      # - name: Install dependencies (Windows)
      #   if: runner.os == 'Windows'
      #   run: choco install ... # 如果有需要

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          # Key 需要包含操作系统，以防缓存冲突
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build binary with cargo
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Prepare artifact
        id: prepare_artifact
        shell: bash
        run: |
          BIN_NAME="telembed" # <-- 你的包名
          TARGET="${{ matrix.target }}"

          # 根据操作系统设置正确的二进制路径和后缀
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BIN_PATH="target/${TARGET}/release/${BIN_NAME}.exe"
            ARTIFACT_NAME="${BIN_NAME}-${TARGET}.exe"
          else
            BIN_PATH="target/${TARGET}/release/${BIN_NAME}"
            ARTIFACT_NAME="${BIN_NAME}-${TARGET}"
          fi

          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "bin_path=${BIN_PATH}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.artifact_name }}
          path: ${{ steps.prepare_artifact.outputs.bin_path }}
